#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

art_usage() {
  printf "art - Manage video art projects\n\n"

  printf "%s\n" "Usage:"
  printf "  art COMMAND\n"
  printf "  art [COMMAND] --help | -h\n"
  printf "  art --version | -v\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Generate bash completions\n" "completions"
  printf "  %s   Scene commands\n" "scene      "
  echo
  printf "%s\n" "Projects Commands:"
  printf "  %s   List all projects\n" "list       "
  printf "  %s   Create a new project\n" "init       "
  printf "  %s   Select a project (make link to the main dir)\n" "select     "
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    printf "%s\n" "Environment Variables:"

    printf "  %s\n" "ART_CURRENT_PATH"
    printf "    Symlinked current project path\n"
    printf "    %s\n" "Default: $HOME/Art"
    echo

    printf "  %s\n" "ART_PROJECTS_PATH"
    printf "    Folder where the projects are stored\n"
    printf "    %s\n" "Default: $HOME/Videos/Creations"
    echo

  fi
}

art_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "art completions\n\n"
    printf "  Generate bash completions\n  Usage: eval \"\$(art completions)\"\n\n"
  else
    printf "art completions - Generate bash completions\n\n"
  fi

  printf "%s\n" "Usage:"
  printf "  art completions\n"
  printf "  art completions --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

art_list_usage() {
  printf "art list - List all projects\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art list\n"
  printf "  art list --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art ls\n"
    echo

  fi
}

art_init_usage() {
  printf "art init - Create a new project\n\n"
  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art init NAME\n"
  printf "  art init --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "NAME"
    printf "    Name of the project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art init my-new-project\n"
    echo

  fi
}

art_select_usage() {
  printf "art select - Select a project (make link to the main dir)\n\n"
  printf "Alias: l\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art select NAME\n"
  printf "  art select --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "NAME"
    printf "    Name of the project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art select my-new-project\n"
    echo

  fi
}

art_scene_usage() {
  printf "art scene - Scene commands\n\n"
  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene COMMAND\n"
  printf "  art scene [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Scenes Commands:"
  printf "  %s   List all scenes\n" "list   "
  printf "  %s   Create a new sciene\n" "create "
  printf "  %s   Import a source to scene\n" "import "
  printf "  %s   Remove source from scene\n" "rm     "
  printf "  %s   Open scene in Natron\n" "open   "
  printf "  %s   Create a new iteration (version) of the scene\n" "iterate"
  printf "  %s   Display tree of project/scene\n" "tree   "
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

art_scene_list_usage() {
  printf "art scene list - List all scenes\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene list\n"
  printf "  art scene list --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art scene ls\n"
    echo

  fi
}

art_scene_create_usage() {
  printf "art scene create - Create a new sciene\n\n"
  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene create NAME\n"
  printf "  art scene create --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "NAME"
    printf "    Name of the scene\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art create first-scene\n"
    echo

  fi
}

art_scene_import_usage() {
  printf "art scene import - Import a source to scene\n\n"
  printf "Alias: a\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene import SCENE SUBSCENE SOURCE\n"
  printf "  art scene import --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SCENE"
    printf "    Name of the scene\n"
    echo

    printf "  %s\n" "SUBSCENE"
    printf "    Name of the sub-scene\n"
    echo

    printf "  %s\n" "SOURCE"
    printf "    Source file\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art scene add first-scene mask mask.png\n"
    echo

  fi
}

art_scene_rm_usage() {
  printf "art scene rm - Remove source from scene\n\n"
  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene rm SCENE SUBSCENE\n"
  printf "  art scene rm --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SCENE"
    printf "    Name of the scene\n"
    echo

    printf "  %s\n" "SUBSCENE"
    printf "    Name of the sub-scene\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art scene rm first-scene mask\n"
    echo

  fi
}

art_scene_open_usage() {
  printf "art scene open - Open scene in Natron\n\n"
  printf "Alias: o\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene open SCENE\n"
  printf "  art scene open --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SCENE"
    printf "    Name of the scene\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art scene open first-scene\n"
    echo

  fi
}

art_scene_iterate_usage() {
  printf "art scene iterate - Create a new iteration (version) of the scene\n\n"
  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene iterate SCENE [OPTIONS]\n"
  printf "  art scene iterate --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--open, -o"
    printf "    Open after copying\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SCENE"
    printf "    Name of the scene\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art scene iterate first-scene\n"
    echo

  fi
}

art_scene_tree_usage() {
  printf "art scene tree - Display tree of project/scene\n\n"
  printf "Alias: t\n"
  echo

  printf "%s\n" "Usage:"
  printf "  art scene tree [SCENE]\n"
  printf "  art scene tree --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SCENE"
    printf "    Name of the scene\n"
    echo

    printf "%s\n" "Examples:"
    printf "  art scene tree\n"
    printf "  art scene tree first-scene\n"
    echo

  fi
}

normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

send_completions() {
  echo $'# art completion                                           -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_art_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $''
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_art_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'scene import\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene create\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene list\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s import\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s create\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene rm\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene ls\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene a\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene c\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene r\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s list\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'select\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'scene\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h a c create import list ls r rm")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s ls\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'init\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s rm\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'list\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s a\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s r\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s c\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'ls\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h a c create import list ls r rm")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'l\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'i\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_art_completions_filter "--help --version -h -v completions i init l list ls s scene select")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'  complete -F _art_completions art'
  echo $''
  echo $'# ex: filetype=sh'
}

validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

validate_scene_exists() {
    scene_name="$1"
    [ -d "$ART_CURRENT_PATH/Scenes/$scene_name" ] || echo "Scene $scene_name does not exist"
}

art_completions_command() {
  send_completions

}

art_list_command() {
  ls "$ART_PROJECTS_PATH"

}

art_init_command() {
  name=${args[name]}
  path="$ART_PROJECTS_PATH/$name"

  [ -d "$path" ] && echo "Project $name already exists" && exit 1

  mkdir -p "$path"

}

art_select_command() {
  name=${args[name]}
  path="$ART_PROJECTS_PATH/$name"

  [ ! -d "$path" ] && echo "Project $name does not exist" && exit 1

  [ -e "$ART_CURRENT_PATH" ] && [ ! -L "$ART_CURRENT_PATH" ] \
      && echo "Target folder is not a symlink. Exiting." && exit 1

  rm -f "$ART_CURRENT_PATH"
  ln -sfv "$path" "$ART_CURRENT_PATH"

}

art_scene_list_command() {
  ls "$ART_CURRENT_PATH/Scenes"

}

art_scene_create_command() {
  name=${args[name]}

  path="$ART_CURRENT_PATH/Scenes/$name"

  [ -d "$path" ] && echo "Scene $name already exists" && exit 1

  mkdir -pv "$path"
  mkdir -p "$path/Read"
  mkdir -p "$path/Write"
  mkdir -p "$path/Intermediate"

}

art_scene_import_command() {
  scene=${args[scene]}
  subscene=${args[subscene]}
  source=${args[source]}

  extension="${source##*.}"

  read_dir="$ART_CURRENT_PATH/Scenes/$scene/Read"
  mkdir -p "$read_dir"

  case "$extension" in
      mp4)
          mkdir "$read_dir/$subscene"
          cp -vi "$source" "$read_dir/$subscene/$subscene.$extension"
          ;;
      *)
          cp -vi "$source" "$read_dir/$subscene.$extension"
          ;;
  esac

}

art_scene_rm_command() {
  scene=${args[scene]}
  subscene=${args[subscene]}

  read_dir="$ART_CURRENT_PATH/Scenes/$scene/Read"

  trash -v "$read_dir/$subscene"

}

art_scene_open_command() {
  scene=${args[scene]}

  path="$ART_CURRENT_PATH/Scenes/$scene"

  cd "$path" || exit 1

  latest=$(find . -maxdepth 1 -name "$scene*.ntp" | sort -V | tail -n 1)

  wms "Natron $latest"

}

art_scene_iterate_command() {
  scene=${args[scene]}

  path="$ART_CURRENT_PATH/Scenes/$scene"

  cd "$path" || exit 1

  latest=$(find . -maxdepth 1 -name "$scene*.ntp" | sort -V | tail -n 1)

  current_number=$(echo "$latest" | grep -o '[0-9]\+')
  echo "Latest version is $current_number"

  new_file=$(printf "$scene%02d.ntp" $((current_number + 1)))

  cp -vi "$latest" "$new_file"

  [ "${args[--open]}" ] && wms "Natron $new_file"

}

art_scene_tree_command() {
  scene=${args[scene]}

  path="$ART_CURRENT_PATH/Scenes"

  [ "$scene" ] && path="$path/$scene"

  eza --icons --tree "$path"

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        art_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  export ART_CURRENT_PATH="${ART_CURRENT_PATH:-$HOME/Art}"
  export ART_PROJECTS_PATH="${ART_PROJECTS_PATH:-$HOME/Videos/Creations}"

  env_var_names+=("ART_CURRENT_PATH")
  env_var_names+=("ART_PROJECTS_PATH")

  action=${1:-}

  case $action in
    -*) ;;

    completions)
      action="completions"
      shift
      art_completions_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      art_list_parse_requirements "$@"
      shift $#
      ;;

    init | i)
      action="init"
      shift
      art_init_parse_requirements "$@"
      shift $#
      ;;

    select | l)
      action="select"
      shift
      art_select_parse_requirements "$@"
      shift $#
      ;;

    scene | s)
      action="scene"
      shift
      art_scene_parse_requirements "$@"
      shift $#
      ;;

    "")
      art_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

art_completions_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="completions"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

art_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

art_init_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="init"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: art init NAME\n" >&2

    exit 1
  fi

}

art_select_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_select_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="select"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: art select NAME\n" >&2

    exit 1
  fi

}

art_scene_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    list | ls)
      action="list"
      shift
      art_scene_list_parse_requirements "$@"
      shift $#
      ;;

    create | c)
      action="create"
      shift
      art_scene_create_parse_requirements "$@"
      shift $#
      ;;

    import | a)
      action="import"
      shift
      art_scene_import_parse_requirements "$@"
      shift $#
      ;;

    rm | r)
      action="rm"
      shift
      art_scene_rm_parse_requirements "$@"
      shift $#
      ;;

    open | o)
      action="open"
      shift
      art_scene_open_parse_requirements "$@"
      shift $#
      ;;

    iterate | i)
      action="iterate"
      shift
      art_scene_iterate_parse_requirements "$@"
      shift $#
      ;;

    tree | t)
      action="tree"
      shift
      art_scene_tree_parse_requirements "$@"
      shift $#
      ;;

    "")
      art_scene_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

art_scene_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

art_scene_create_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene create"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: art scene create NAME\n" >&2

    exit 1
  fi

}

art_scene_import_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_import_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene import"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['scene']+x} ]]; then
          args['scene']=$1
          shift

        elif [[ -z ${args['subscene']+x} ]]; then
          args['subscene']=$1
          shift

        elif [[ -z ${args['source']+x} ]]; then
          args['source']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['scene']+x} ]]; then
    printf "missing required argument: SCENE\nusage: art scene import SCENE SUBSCENE SOURCE\n" >&2

    exit 1
  fi
  if [[ -z ${args['subscene']+x} ]]; then
    printf "missing required argument: SUBSCENE\nusage: art scene import SCENE SUBSCENE SOURCE\n" >&2

    exit 1
  fi
  if [[ -z ${args['source']+x} ]]; then
    printf "missing required argument: SOURCE\nusage: art scene import SCENE SUBSCENE SOURCE\n" >&2

    exit 1
  fi

  if [[ -v args['scene'] && -n $(validate_scene_exists "${args['scene']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SCENE" "$(validate_scene_exists "${args['scene']:-}")" >&2
    exit 1
  fi

  if [[ -v args['source'] && -n $(validate_file_exists "${args['source']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SOURCE" "$(validate_file_exists "${args['source']:-}")" >&2
    exit 1
  fi

}

art_scene_rm_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_rm_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene rm"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['scene']+x} ]]; then
          args['scene']=$1
          shift

        elif [[ -z ${args['subscene']+x} ]]; then
          args['subscene']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['scene']+x} ]]; then
    printf "missing required argument: SCENE\nusage: art scene rm SCENE SUBSCENE\n" >&2

    exit 1
  fi
  if [[ -z ${args['subscene']+x} ]]; then
    printf "missing required argument: SUBSCENE\nusage: art scene rm SCENE SUBSCENE\n" >&2

    exit 1
  fi

  if [[ -v args['scene'] && -n $(validate_scene_exists "${args['scene']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SCENE" "$(validate_scene_exists "${args['scene']:-}")" >&2
    exit 1
  fi

}

art_scene_open_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_open_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene open"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['scene']+x} ]]; then
          args['scene']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['scene']+x} ]]; then
    printf "missing required argument: SCENE\nusage: art scene open SCENE\n" >&2

    exit 1
  fi

  if [[ -v args['scene'] && -n $(validate_scene_exists "${args['scene']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SCENE" "$(validate_scene_exists "${args['scene']:-}")" >&2
    exit 1
  fi

}

art_scene_iterate_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_iterate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene iterate"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --open | -o)

        args['--open']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['scene']+x} ]]; then
          args['scene']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['scene']+x} ]]; then
    printf "missing required argument: SCENE\nusage: art scene iterate SCENE [OPTIONS]\n" >&2

    exit 1
  fi

  if [[ -v args['scene'] && -n $(validate_scene_exists "${args['scene']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SCENE" "$(validate_scene_exists "${args['scene']:-}")" >&2
    exit 1
  fi

}

art_scene_tree_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        art_scene_tree_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="scene tree"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['scene']+x} ]]; then
          args['scene']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -v args['scene'] && -n $(validate_scene_exists "${args['scene']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SCENE" "$(validate_scene_exists "${args['scene']:-}")" >&2
    exit 1
  fi

}

initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  export ART_CURRENT_PATH="${ART_CURRENT_PATH:-$HOME/Art}"
  export ART_PROJECTS_PATH="${ART_PROJECTS_PATH:-$HOME/Videos/Creations}"

  mkdir -p "$ART_PROJECTS_PATH"

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "completions") art_completions_command ;;
    "list") art_list_command ;;
    "init") art_init_command ;;
    "select") art_select_command ;;
    "scene") art_scene_command ;;
    "scene list") art_scene_list_command ;;
    "scene create") art_scene_create_command ;;
    "scene import") art_scene_import_command ;;
    "scene rm") art_scene_rm_command ;;
    "scene open") art_scene_open_command ;;
    "scene iterate") art_scene_iterate_command ;;
    "scene tree") art_scene_tree_command ;;
  esac
}

initialize
run "$@"
