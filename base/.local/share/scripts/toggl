#!/bin/bash

set -eo 'pipefail'

cache="${XDG_CACHE_DIR:-$HOME/.cache}/toggl"
mkdir -pv "$cache"

if [ -f "$cache/workspace" ]; then
    workspace_id=$(cat "$cache/workspace")
else
    workspace_id=$(curl -sfu \
        "$TOGGL_API_TOKEN":api_token https://api.track.toggl.com/api/v9/me \
        | jq '.default_workspace_id')

    echo "$workspace_id" > "$cache/workspace" 

fi

[ -z "$workspace_id" ] && echo "Failed to get default workspace" && exit 1

# Idea is to automatically iterate over projects and cache each projects tasks
list-project-tasks() {
    curl -sf \
        https://api.track.toggl.com/api/v9/workspaces/"$workspace_id"/projects/"$1"/tasks \
        -H "Content-Type: application/json" \
        -u "$TOGGL_API_TOKEN":api_token \
        | jq -r 'sort_by(.id) | reverse | map((.id | tostring) + "\t" + .name + .project_name) | .[]'
}

list-projects() {
    curl -sf \
        https://api.track.toggl.com/api/v9/workspaces/"$workspace_id"/projects \
        -H "Content-Type: application/json" \
        -u "$TOGGL_API_TOKEN":api_token \
        | jq -r 'map((.id | tostring) + "\t" + .name) | .[]'
}

list-entries() {
    start=$(date +%Y-%m-%dT00:00:00Z)
    end=$(date +%Y-%m-%dT23:59:59Z)

    curl -sSf "https://api.track.toggl.com/api/v9/me/time_entries?start_date=$start&end_date=$end&meta=true" \
        -H "Content-Type: application/json" \
        -u "$TOGGL_API_TOKEN":api_token \
        | jq -r 'sort_by(.id) | map((.id | tostring) + "\t" + (.duration / 60 | tostring) + "min" + "\t" + .name + .task_name) | .[]'
}

create-time-entry() {
    curl -sfX 'POST' \
        https://api.track.toggl.com/api/v9/workspaces/"$workspace_id"/time_entries \
        -H "Content-Type: application/json" \
        -u "$TOGGL_API_TOKEN":api_token \
        | jq -r 'map((.id | tostring) + "\t" + .name) | .[]'
}

branch-projects() {
    case "$1" in
        all)
            list-projects | column -ts $'\t'
            ;;
        add)
            list-projects | fzf -i --delimiter="\t" --with-nth=2 >> "$cache/projects"
            ;;
        ls)
            column -ts $'\t' < "$cache/projects"
            ;;
        *)
            print-help
            exit 1
            ;;
    esac
}

sync-tasks() {
    projects_ids=$(awk '{print $1}' "$cache/projects")
    all_tasks=''

    for id in $projects_ids; do
        all_tasks="$all_tasks$(list-project-tasks "$id")"
    done

    echo "Sycned total $(echo "$all_tasks" | wc -l) tasks."
    echo "$all_tasks" > "$cache/tasks"
}

print-help() {
    echo ''
    echo "toggl [projects|sync|select|copy]"
    echo ''
    echo "toggl projects [all|add|ls]"
}

case "$1" in
    p|projects)
        shift
        branch-projects "$@"
        ;;
    y|sync)
        sync-tasks
        ;;
    s|sel|select)
        selected_task=$(fzf -i --delimiter="\t" --with-nth=2 < "$cache/tasks")
        echo "$selected_task" > "$cache/current_task"
        ;;
    c|cp|copy)
        selected_task=$(fzf -i --delimiter="\t" --with-nth=2 < "$cache/tasks")
        echo -n "$selected_task" | awk -F'\t' '{print $2}' | pbcopy
        ;;
    ls)
        list-entries
        ;;
    r|start)
        now=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
        echo "$now" > "$cache/start_time"
        ;;
    t|stop)
        start=$(<"$cache/start_time")
        # CURL
        rm "$cache/start_time"
        ;;

    *)
        echo "unknown option $1"
        print-help
        exit 1
        ;;
esac

exit 0

